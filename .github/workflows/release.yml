name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: windows-amd64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'x86_64-pc-windows-gnu' || matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          sudo apt-get install -y gcc-mingw-w64-x86-64
        elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Configure cargo for cross-compilation
      if: matrix.target == 'x86_64-pc-windows-gnu' || matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        mkdir -p ~/.cargo
        if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          echo '[target.x86_64-pc-windows-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "x86_64-w64-mingw32-gcc"' >> ~/.cargo/config.toml
        elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        fi

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          mkdir -p ../../../sitewinder-${{ matrix.name }}
          cp sitewinder.exe ../../../sitewinder-${{ matrix.name }}/
          cd ../../../
          zip -r sitewinder-${{ matrix.name }}.zip sitewinder-${{ matrix.name }}/
        else
          mkdir -p ../../../sitewinder-${{ matrix.name }}
          cp sitewinder ../../../sitewinder-${{ matrix.name }}/
          cd ../../../
          tar -czf sitewinder-${{ matrix.name }}.tar.gz sitewinder-${{ matrix.name }}/
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-archive
        path: |
          sitewinder-*.zip
          sitewinder-*.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          linux-amd64-archive/sitewinder-linux-amd64.tar.gz
          linux-arm64-archive/sitewinder-linux-arm64.tar.gz
          macos-amd64-archive/sitewinder-macos-amd64.tar.gz
          macos-arm64-archive/sitewinder-macos-arm64.tar.gz
          windows-amd64-archive/sitewinder-windows-amd64.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
